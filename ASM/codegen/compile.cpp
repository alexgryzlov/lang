// THIS FILE IS AUTOGENERATED. DO NOT CHANGE ANYTHING.

case 0: {
	for (size_t i = 0; i < 1; i++) {
		++pc;
		compiled_text[pc] = strtol(text[pc].ptr + 1, NULL, 10);
	}
	break;
}
case 1: {
	for (size_t i = 0; i < 1; i++) {
		++pc;
		compiled_text[pc] = strtol(text[pc].ptr + 1, NULL, 10);
	}
	break;
}
case 5: {
	for (size_t i = 0; i < 1; i++) {
		++pc;
		compiled_text[pc] = strtol(text[pc].ptr, NULL, 10);
	}
	break;
}
case 7: {
	for (size_t i = 0; i < 1; i++) {
		++pc;
		tmp.ptr = text[pc].ptr;
		tmp.len = text[pc].len;
		compiled_text[pc] = label_trie.get_code(tmp);
	}
	break;
}
case 9: {
	for (size_t i = 0; i < 2; i++) {
		++pc;
		compiled_text[pc] = strtol(text[pc].ptr + 1, NULL, 10);
	}
	break;
}
case 10: {
	for (size_t i = 0; i < 1; i++) {
		++pc;
		tmp.ptr = text[pc].ptr;
		tmp.len = text[pc].len;
		compiled_text[pc] = label_trie.get_code(tmp);
	}
	break;
}
case 11: {
	for (size_t i = 0; i < 1; i++) {
		++pc;
		tmp.ptr = text[pc].ptr;
		tmp.len = text[pc].len;
		compiled_text[pc] = label_trie.get_code(tmp);
	}
	break;
}
case 12: {
	for (size_t i = 0; i < 1; i++) {
		++pc;
		tmp.ptr = text[pc].ptr;
		tmp.len = text[pc].len;
		compiled_text[pc] = label_trie.get_code(tmp);
	}
	break;
}
case 16: {
	for (size_t i = 0; i < 1; i++) {
		++pc;
		tmp.ptr = text[pc].ptr;
		tmp.len = text[pc].len;
		compiled_text[pc] = label_trie.get_code(tmp);
	}
	break;
}
case 17: {
	for (size_t i = 0; i < 1; i++) {
		++pc;
		tmp.ptr = text[pc].ptr;
		tmp.len = text[pc].len;
		compiled_text[pc] = label_trie.get_code(tmp);
	}
	break;
}
case 18: {
	for (size_t i = 0; i < 1; i++) {
		++pc;
		tmp.ptr = text[pc].ptr;
		tmp.len = text[pc].len;
		compiled_text[pc] = label_trie.get_code(tmp);
	}
	break;
}
case 19: {
	for (size_t i = 0; i < 1; i++) {
		++pc;
		tmp.ptr = text[pc].ptr;
		tmp.len = text[pc].len;
		compiled_text[pc] = label_trie.get_code(tmp);
	}
	break;
}
